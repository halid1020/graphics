<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
    //Put the vertex in the correct coordinate system by applying the model view matrix
    vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;
	vertexIn.position_camSpace = vertex_camSpace;
	
    //Apply the model-view transformation to the normal (only rotation, no translation)
    //Normals put in the camera space
    vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);

	//Color chosen as red
	vertexIn.color = vec4(1.0,0.0,0.0,1.0);
    
    //Texture coordinate
    vertexIn.textureCoordinate = textureCoordinate_input;
	
    gl_Position = pMatrix * vertex_camSpace;
}



















]]></vertex>
<geom>
<![CDATA[#version 400

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space


in data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn[3];

out fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


void main() {
  for(int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
	frag.position_camSpace = vertexIn[i].position_camSpace;
	frag.normal_camSpace = vertexIn[i].normal_camSpace;
	frag.textureCoordinate = vertexIn[i].textureCoordinate;
	frag.color = vertexIn[i].color;
    EmitVertex();
  }
  EndPrimitive();
}


















]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


out vec4 fragColor;

//Fragment shader computes the final color
void main(void)
{
	//Not used in that task
    fragColor =  frag.color;
}


















]]></frag>
<R2TVert>
<![CDATA[#version 400
#extension GL_ARB_separate_shader_objects : enable

uniform mat4 mMatrix;
uniform mat4 mvMatrix;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;

out vec3 dir; 

void  main () 
{ 
	vec4 vertex_modelSpace = mMatrix*vertex_worldSpace;
	
    dir = normalize ( vec3 ( vertex_modelSpace.x * 1.6,  vertex_modelSpace.y , -1.0 )); 
	
    gl_Position  = vertex_modelSpace; 
}



















]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

in vec3 dir; 
out vec4 outcolour;

uniform mat4 mMatrix;
uniform mat4 mvMatrix;
uniform mat4 mvMatrixScene;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation


uniform float indexOfRefraction = 1.0;

//sky texture
uniform sampler2D nightSky;

//light
uniform vec3 lightPosition_worldSpace = vec3(0, 10, 0);
uniform float light_intensity = 2000;

//local illumination para
uniform float shininess = 10;
uniform float ambientCoefficient = 0.1;
uniform float diffuseCoefficient = 1;
uniform float specularCoefficient = 1;
const float pi = 3.1415926f;
const float epsilon = 0.0001;

const int raytraceDepth = 4;

// Objects number
const int numSpheres = 6;
const int numSkyPlanes = 1;


//example data structures
struct Ray
{ 
	vec3 origin;
	vec3 dir;
	float transparency;
	float intensity;
	float indexOfRefraction;
	int depth;
};
struct Sphere
{
	vec3 centre;
	float radius;
	vec3 colour;
	float indexOfRefraction;
	float transparency;
};
struct Plane
{
	vec3 point;
	vec3 normal;
	vec3 colour;
	float indexOfRefraction;
	float transparency;
};

struct Intersection
{
    float t; //closest hit
    vec3 point;	// hit point
    vec3 normal;	// normal
	vec3 normal_illu;	// normal
    int hit;	//did it hit?
    vec3 colour; // colour accumulation, can be also implemented in struct Ray
	float indexOfRefraction;
	bool inObject;
	float transparency;
	bool is_wall;
};

void shpere_intersect(Sphere sph, Ray ray, inout Intersection intersect)
{
	intersect.hit = 0;
	intersect.colour = vec3(0, 0, 0);
	intersect.is_wall = false;
	float epsilon = 0;

	vec3 d = normalize(ray.dir);
	vec3 p0 = ray.origin;
	vec3 ps = sph.centre;
	vec3 delta_p = p0-ps;
	float r = sph.radius;

	float a = dot(d, delta_p);
	float hit = a*a - dot(delta_p, delta_p) + r*r;
	if (hit < 0) {
		return;
	}

	float b = sqrt(hit);
	float miu_1 = -a + b;
	float miu_2 = -a - b;

	// sphere is behind
	if (miu_1 < 0) {
		return;
	}
	
	// sphere is in front
	if (miu_2 > 0) {
		intersect.t = miu_2;
		intersect.colour = sph.colour;
		intersect.hit = 1;
		intersect.point = p0 + miu_2*d;
		intersect.inObject = false;
		intersect.normal_illu = intersect.normal = normalize(intersect.point-ps);
		intersect.indexOfRefraction = sph.indexOfRefraction;
		intersect.transparency = sph.transparency;
		return;
	} 

	// origin is inside of sphere
	intersect.t = miu_1;
	intersect.colour = sph.colour;
	intersect.hit = 1;
	intersect.point = p0 + miu_1*d;
	intersect.normal = normalize(ps - intersect.point);
	intersect.normal_illu = -intersect.normal;
	intersect.indexOfRefraction = sph.indexOfRefraction;
	intersect.inObject = true;
	intersect.transparency = 1;
}

void plane_intersect(Plane pl, Ray ray, inout Intersection intersect, bool checkboard)
{
	intersect.hit = 0;
	intersect.colour = vec3(0, 0, 0);

	vec3 p0 = ray.origin;
	vec3 d = normalize(ray.dir);
	vec3 n = normalize(pl.normal);
	vec3 p1 = pl.point;

	float miu = -dot(p0-p1, n)/dot(d, n);

	if (miu < 0) {
		return;
	}
	
	intersect.t = miu;
	intersect.hit = 1;
	intersect.point = p0 + miu*d;
	intersect.normal_illu = n;
	intersect.normal = n;
	intersect.inObject=false;
	intersect.transparency = pl.transparency;
	
	float x = mod(intersect.point.x, 2.0);
	float z = mod(intersect.point.z, 2.0);
	if (checkboard) {
		int c = int(0 <= x && x < 1.0)^int(0 <= z && z < 1.0)^1;
		intersect.colour = vec3(c, c, c);
		intersect.is_wall = false;
	} else {
		intersect.colour = pl.colour;
		intersect.is_wall = true;
	}
	intersect.indexOfRefraction = pl.indexOfRefraction;
}

Sphere sphere[numSpheres];
Plane bottom_plane;
Plane sky_plane[numSkyPlanes];

void Intersect(Ray r, inout Intersection i)
{
	// intersect all objects
	const int numObjects = numSpheres + numSkyPlanes + 1;
	Intersection intersections[numObjects];
	for (int k = 0; k < numSpheres; k++) {
		shpere_intersect(sphere[k], r, intersections[k]);		
	}
	plane_intersect(bottom_plane, r, intersections[numSpheres], true);
	//plane_intersect(plane[1], r, intersections[7], false);
	for (int k = numSpheres + 1; k < numObjects; k++) {
		plane_intersect(sky_plane[k-numSpheres-1], r, intersections[k], false);
	}	

	//find closest intersection
	i.hit = 0;
	bool found = false;
	float min_t = -1;
	for (int k = 0; k < numObjects; k++) {
		if (intersections[k].hit == 1) {
			float t = intersections[k].t;
			if (t < min_t || !found) {
                found = true;
				min_t = t;
				i = intersections[k];
			}	
		}
	}
}

int seed = 0;
float rnd()
{
	seed = int(mod(float(seed)*1364.0+626.0, 509.0));
	return float(seed)/509.0;
}

vec4 computeShadow(in Intersection intersect)
{
	Ray shadow_ray;
	shadow_ray.origin = intersect.point + epsilon*intersect.normal_illu;
	shadow_ray.dir = lightPosition_worldSpace - intersect.point;

	Intersection shadow_ray_intersection;
	Intersect(shadow_ray, shadow_ray_intersection);
	
	if (shadow_ray_intersection.hit==1) {
		return vec4(0, 0, 0, 0);	
	}
	return vec4(1,1,1,1);
}

vec4 local_illumination(in vec3 viewPoint, in Intersection intersect) {
	vec4 ambient = vec4(intersect.colour, 1);
	vec4 diffuse = vec4(intersect.colour, 1);
	vec4 specular = vec4(1, 1, 1, 1);

	if(intersect.is_wall) {
		return ambient;	
	}

	float phi_s = light_intensity;
	float d = distance(intersect.point, lightPosition_worldSpace);
	float c = phi_s/(4*pi*d*d);
	vec3 n = normalize(vec3(intersect.normal_illu));
	vec3 l = normalize(lightPosition_worldSpace - intersect.point);
	vec3 v = normalize(viewPoint - intersect.point);
	vec3 r = normalize(2*dot(n,l)*n -l);
	
	vec4 shadow = computeShadow(intersect);
	return ambientCoefficient*ambient +
		   shadow*(c*diffuseCoefficient*max(0, dot(n,l))*diffuse +
		           c*specularCoefficient*pow(max(0,dot(v,r)), shininess)*specular);
}


float fresnel_calculate(in Ray ray, in Intersection intersect)
{
	float n1 = ray.indexOfRefraction;
	float n2 = intersect.indexOfRefraction;
	float k_fresnel_0 = (n1-n2)*(n1-n2)/(n1+n2)/(n1+n2);
	return k_fresnel_0 + 
           (1.0-k_fresnel_0)*pow((1.0- dot(intersect.normal, -ray.dir)), 5);
}


Ray reflect_ray(in Ray ray, in Intersection intersect,in float coefficient)
{
	Ray new_ray;
	vec3 n = intersect.normal;
	vec3 v = ray.dir;
	new_ray.dir = normalize(v - n*(2*dot(ray.dir, n)));
	new_ray.origin = intersect.point + epsilon*n;
	new_ray.transparency = ray.transparency;
	new_ray.intensity = ray.intensity*coefficient;
	new_ray.indexOfRefraction = intersect.indexOfRefraction;
	new_ray.depth = ray.depth+1;
	new_ray.transparency = ray.transparency;
	return new_ray;
}

Ray refract_ray(in Ray ray, in Intersection intersect,in float coefficient)
{
	Ray new_ray;
	vec3 n = intersect.normal;
	vec3 v = ray.dir;
	float n1 = ray.indexOfRefraction;
	float n2 = intersect.indexOfRefraction;

	float dot_n_v = dot(n, v);
	float n1_over_n2 = n1/n2;
	float n2_over_n1 = n2/n1;

	float is_refract = dot_n_v*dot_n_v + n2_over_n1*n2_over_n1 -1.0;
	if(is_refract < 0.0) {
		new_ray.intensity = 0.0;
		return new_ray;
	}
	
	new_ray.dir = normalize(refract(v, n, n1_over_n2));
	new_ray.origin = intersect.point - epsilon*n;
	new_ray.intensity = ray.intensity*coefficient;
	new_ray.indexOfRefraction = intersect.indexOfRefraction;
	new_ray.transparency = intersect.transparency;
	new_ray.depth = ray.depth+1;
	return new_ray;
}


void main()
{
	//please leave the scene config unaltered for marking 
	sphere[0].centre   = vec3(-2.0, 1.5, -3.5);
	sphere[0].radius   = 1.5;
	sphere[0].colour = vec3(0.8,0.8,0.8);
	sphere[0].indexOfRefraction = 1.3;
	sphere[0].transparency = 0.5;
	
	sphere[1].centre   = vec3(-0.5, 0.0, -2.0);
	sphere[1].radius   = 0.6;
	sphere[1].colour = vec3(0.3,0.8,0.3);
	sphere[1].indexOfRefraction = 1.1;
	
	sphere[2].centre   = vec3(1.0, 0.7, -2.2);
	sphere[2].radius   = 0.8;
	sphere[2].colour = vec3(0.3,0.8,0.8);
	sphere[2].indexOfRefraction = 3.0;
	sphere[2].transparency = 0.0;
	
	sphere[3].centre   = vec3(0.7, -0.3, -1.2);
	sphere[3].radius   = 0.2;
	sphere[3].colour = vec3(0.8,0.8,0.3);
	sphere[3].indexOfRefraction = 2.0;
	sphere[3].transparency = 0.8;
	
	sphere[4].centre   = vec3(-0.7, -0.3, -1.2);
	sphere[4].radius   = 0.2;
	sphere[4].colour = vec3(0.8,0.3,0.3);
	sphere[4].indexOfRefraction = 2.5;
	sphere[4].transparency = 0.3;

	sphere[5].centre   = vec3(0.2, -0.2, -1.2);
	sphere[5].radius   = 0.3;
	sphere[5].colour = vec3(0.8,0.3,0.8);
	sphere[5].indexOfRefraction = 2.8;
	sphere[5].transparency = 0.2;

	bottom_plane.point = vec3(0,-10, 0);
	bottom_plane.normal = vec3(0, -1.0, 0);
	bottom_plane.colour = vec3(1, 1, 1);
	bottom_plane.indexOfRefraction = 3;

	/*
	sky_plane[0].point = vec3(100,0, 0);
	sky_plane[0].normal = vec3(-1.0, 0, 0);
	sky_plane[0].colour = vec3(1, 0, 0);
	sky_plane[0].transparency = 0;

	sky_plane[1].point = vec3(-1000,0, 0);
	sky_plane[1].normal = vec3(1.0, 0, 0);
	sky_plane[1].colour = vec3(1, 0, 0);
	sky_plane[1].transparency = 0;
	
	sky_plane[2].point = vec3(0,0, 1000);
	sky_plane[2].normal = vec3(0, 0, -1.0);
	sky_plane[2].colour = vec3(1, 0, 0);
	sky_plane[2].transparency = 0;

	sky_plane[3].point = vec3(0,0, -1000);
	sky_plane[3].normal = vec3(0, 0, -1.0);
	sky_plane[3].colour = vec3(1, 0, 0);
	sky_plane[3].transparency = 0;

	sky_plane[4].point = vec3(0,1000, 0);
	sky_plane[4].normal = vec3(0, -1.0, 0);
	sky_plane[4].colour = vec3(1, 0, 0);
	sky_plane[4].transparency = 0;
*/
	seed = int(mod(dir.x * dir.y * 39786038.0, 65536.0));
	//scene definition end

	vec4 colour = vec4(0,0,0,1);

	//define ray
	Ray rays[40];
	Ray first_ray;	

	vec4 origin_viewSpace  = vec4(0, 0, 0, 1);
	vec4 origin_worldSpace = inverse(mvMatrixScene)*origin_viewSpace;
    first_ray.origin = origin_worldSpace.xyz;

	vec4 dir_viewSpace  = vec4(dir, 0);
	vec4 dir_worldSpace = inverse(mvMatrixScene)*dir_viewSpace;
    first_ray.dir = normalize(dir_worldSpace.xyz);
	first_ray.intensity = 1.0;
	first_ray.transparency = 1.0;
	first_ray.indexOfRefraction = 1.0;
	first_ray.depth = 0;

	rays[0] = first_ray;
	// Start ray tracing
	int head = -1;
	int tail =  0;
	int cnt = 0;
	while (head < tail && cnt < 20) {
		head ++;
		cnt++;
		Ray cur_ray = rays[head];

		//intersect with all objects
		Intersection intersect;
		Intersect(cur_ray, intersect);
		if (intersect.hit==0) {
			continue;
		}
	
		vec4 cur_color = cur_ray.intensity*local_illumination(cur_ray.origin, intersect);
		colour += cur_ray.transparency*cur_color;

		if (tail > 20 || intersect.is_wall) continue;
		// generate rays
		if (cur_ray.depth < raytraceDepth) {
			// calculate intensity
			float k_fresnel = fresnel_calculate(cur_ray, intersect);

			// refraction ray
			Ray new_ray = refract_ray(cur_ray, intersect, 1.0-k_fresnel);

			if (new_ray.intensity > epsilon && new_ray.transparency > epsilon){
				rays[++tail] = new_ray;
			}

			new_ray = reflect_ray(cur_ray, intersect, k_fresnel);
			if (new_ray.intensity > epsilon && new_ray.transparency > epsilon){
				rays[++tail] = new_ray;
			}

			
		}
	}	
	outcolour = colour;
}



















]]></R2TFrag>
</pipeline>
